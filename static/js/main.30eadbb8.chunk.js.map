{"version":3,"sources":["components/Task.jsx","components/Tasklist.jsx","components/AddTask.jsx","components/Filter.jsx","App.jsx","actions.js","serviceWorker.js","reducer.js","index.js"],"names":["task","state","taskData","this","props","className","type","onChange","handleStatusChange","checked","status","key","title","value","onClick","handleDeleteTask","Component","taskList","tasks","filter","handleFilterTasks","map","i","Task","handleSwitchStatus","AddTask","addTask","e","preventDefault","handleAddTask","inputValue","setState","onSubmit","evt","target","id","placeholder","Button","Filter","ButtonGroup","filters","bsStyle","renderClassName","handleUpdateFilter","App","filterTasks","style","float","updateFilter","trim","Tasklist","switchStatus","deleteTask","connect","dispatch","payload","actions","taskId","Boolean","window","location","hostname","match","lastId","initalState","store","createStore","action","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.30eadbb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass task extends Component {\n    state = {  }\n    render() { \n        let taskData=this.props.taskData;\n        \n        // console.log(taskData);\n        return (\n          <div >\n            <li className=\"list-group-item \">\n              <input\n                type=\"checkbox\"\n                className=\" \"\n                onChange={this.props.handleStatusChange}\n                checked={this.props.taskData.status}\n                key={this.props.taskData.title}\n                />\n                {taskData.title}\n                \n                <input type=\"button\" \n                className=\"btn btn-danger\" \n                value=\"Delete\" \n                onClick={this.props.handleDeleteTask} />\n              \n            </li>\n          </div>\n        );\n    }\n}\n \nexport default task;","import React, { Component } from 'react';\nimport Task from './Task'\n\n\nclass taskList extends Component {\n  \n\n  render() { \n      return (\n        <div>\n          <br/><br/>\n          <ul className=\"list-group\">\n            {this.props.tasks\n              .filter((task) => this.props.handleFilterTasks(task))\n              .map((i) => (\n                <Task\n                  key={i.title}\n                  handleStatusChange={() => this.props.handleSwitchStatus(i)}\n                  handleDeleteTask={() => this.props.handleDeleteTask(i)}\n                  taskData={i}\n                ></Task>\n              ))}\n          </ul>\n        </div>\n      );\n  }\n}\n \nexport default taskList;","import React, { Component } from 'react';\nimport{Button} from 'react-bootstrap';\nclass AddTask extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      \"inputValue\":\"\"\n    }\n  }  \n  \n  addTask=e=>{\n    e.preventDefault();\n    this.props.handleAddTask(this.state.inputValue)\n    this.setState({inputValue:\"\"})\n    }\n    render() { \n        return (\n\n          <div className=\"col-md-3\">\n            <form onSubmit={this.addTask}>\n            <div className=\"input-group\">\n              <input\n                onChange={(evt) =>\n                  this.setState({ inputValue: evt.target.value })\n                }\n                type=\"text\"\n                id=\"newTaskTitle\"\n                className=\"form-control\"\n                placeholder=\"Add new Task\"\n                value={this.state.inputValue}\n              />\n              <span className=\"input-group-btn\">\n                <Button\n                  \n                  type=\"submit\"\n                  \n                >\n                  Add\n                </Button>\n              </span>\n            </div>\n            </form>\n          </div>\n        );\n    }\n}\n \nexport default AddTask;","import React, { Component } from 'react'\nimport {ButtonGroup, Button} from \"react-bootstrap\";\n\nclass Filter extends Component {\n  renderClassName(filter,i){\n    if(filter!==i){return \"default\"}\n    else{return \"primary\"}\n  }\n    render() { \n        return (\n          <nav className=\"navbar navbar-light bg-light\">\n            <ButtonGroup>\n              {this.props.filters.map((i) => (\n                <Button\n                  bsStyle={this.renderClassName(this.props.filter,i)}\n                  type=\"button\"\n                  onClick={() => this.props.handleUpdateFilter(i)}\n                  \n                  key={i}\n                >\n                  {i}\n                </Button>\n              ))}\n            </ButtonGroup>\n          </nav>\n        );\n    }\n}\n \nexport default Filter;","import React, { Component } from \"react\";\nimport './App.css';\nimport Tasklist from './components/Tasklist';\nimport AddTask from './components/AddTask';\nimport Filter from './components/Filter';\nimport {connect} from 'react-redux';\nimport * as actions from './actions'; \n\n\n\nclass App extends Component {\n  \n /*\n Functions:\n filterTasks(task) - Returns Boolean - Based on currently active filter, Tells if a given task(parameter) should be shown or not.\n */\n\n   filterTasks=(task)=>{\n    let filter=this.props.filter;\n    if(filter===\"All\"){return true}\n    else{\n      if(filter===\"Completed\") {return (task.status)}\n      else{return (!task.status) }\n    }\n  }\n\n   \n/*\nReturns the following Components:\nFilter\nAddTask\nTaskList\n*/ \n  render() { \n    \n    return (\n      <div>\n        \n        \n        <Filter style={{float:\"left\"}}\n          filter={this.props.filter}\n          handleUpdateFilter={(filter) => this.props.updateFilter(filter)}\n          filters={this.props.filters}\n        />\n        \n        <AddTask handleAddTask={(title)=>{if(title.trim()!==\"\") this.props.addTask(title)}} />\n\n      \n        <Tasklist\n          tasks={this.props.tasks}\n          handleFilterTasks={(task) => this.filterTasks(task)}\n          handleSwitchStatus={(task) => this.props.switchStatus(task.id)}\n          handleDeleteTask={(task) => this.props.deleteTask(task.id)}\n        ></Tasklist>\n      </div>\n    );\n  }\n  //sub = store.subscribe(()=>{console.log(\"STORE\")})\n}\n \nconst mapStateToProps = state =>{\n  return{\n    tasks:state.tasks,\n    filter:state.filter,\n    filters:state.filters,\n  };\n}\n\nconst mapStateToDispatch=dispatch=>{\n  return{\n    addTask:(title)=>dispatch(actions.addTask(title)),\n    updateFilter:(filter)=>dispatch(actions.updateFilter(filter)),\n    switchStatus:(taskId)=>dispatch(actions.statusChange(taskId)),\n    deleteTask:(taskId)=>dispatch(actions.deleteTask(taskId)),\n  }\n}\n\nexport default connect(mapStateToProps,mapStateToDispatch)(App);","\nexport const addTask=(title)=>{\n    return{\n        type:\"TASK_ADDED\",\n        payload:{\n            title,\n        }\n    }\n}\nexport const deleteTask=(id)=>{\n    return{\n    type:\"TASK_DELETED\",\n    payload:{\n        id\n    }\n    }\n}\n\nexport const statusChange=(id)=>{\nreturn{\n    type:\"STATUS_CHANGE\",\n    payload:{\n        id\n    }\n}\n}\n\nexport const updateFilter=(filter)=>{\n    return {\n      type: \"FILTER_CHANGE\",\n      payload:{filter}\n    };\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let lastId=2;\nconst initalState = {\n  filter: \"All\",\n  filters: [\"All\", \"Completed\", \"Pending\"],\n  tasks: [\n      {id:0,title:\"Bake Cake\"},\n      {id:1,title:\"Walk the Dog\"},\n    ],\n};\n\nexport default function reducer(state = initalState,action){\nswitch(action.type){\ncase 'TASK_ADDED':\n    return{\n        ...state,\n        \"tasks\":[\n        ...state.tasks,\n        {\"id\":lastId++,\n        \"title\":action.payload.title,\n        \"status\": false}\n        ]\n    }\ncase 'TASK_DELETED':\n        return {\n            ...state,\n            tasks: state.tasks.filter((task) => (\n                task.id !== action.payload.id))                \n        }\n    \ncase 'STATUS_CHANGE':\n        return {\n            ...state,\n            \"tasks\":\n                state.tasks.map((task)=>{\n                    if(task.id===action.payload.id)\n                    {return {...task,\"status\":task.status?false:true}}\n                    else{return task}\n                })            \n        }\ncase 'FILTER_CHANGE':\n    return{\n        ...state,\n        filter:action.payload.filter,\n    }\n    \ndefault:\n    return state;   \n}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport AddTask from './components/AddTask';\nimport {createStore} from 'redux';\nimport reducer from './reducer';\nimport { Provider } from \"react-redux\";\n\nconst store=createStore(reducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n\n\nReactDOM.render(\n <Provider store={store}>\n   <div>\n     <header></header>\n   <App>\n   </App>\n </div>\n </Provider>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["components/Task.jsx","components/Tasklist.jsx","components/AddTask.jsx","components/Filter.jsx","App.jsx","actions.js","serviceWorker.js","reducer.js","index.js"],"names":["task","state","taskData","this","props","className","type","onChange","handleStatusChange","checked","status","key","title","value","onClick","handleDeleteTask","Component","taskList","tasks","filter","handleFilterTasks","map","i","Task","handleSwitchStatus","AddTask","evt","setState","inputValue","target","id","placeholder","Button","handleAddTask","Filter","ButtonGroup","filters","bsStyle","renderClassName","handleUpdateFilter","App","filterTasks","updateFilter","trim","addTask","Tasklist","switchStatus","deleteTask","connect","dispatch","payload","actions","taskId","Boolean","window","location","hostname","match","lastId","initalState","store","createStore","action","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a597a92d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass task extends Component {\r\n    state = {  }\r\n    render() { \r\n        let taskData=this.props.taskData;\r\n        \r\n        // console.log(taskData);\r\n        return (\r\n          <div >\r\n            <li className=\"list-group-item \">\r\n              <input\r\n                type=\"checkbox\"\r\n                className=\" \"\r\n                onChange={this.props.handleStatusChange}\r\n                checked={this.props.taskData.status}\r\n                key={this.props.taskData.title}\r\n                />\r\n                {taskData.title}\r\n                \r\n                <input type=\"button\" \r\n                className=\"btn btn-danger\" \r\n                value=\"Delete\" \r\n                onClick={this.props.handleDeleteTask} />\r\n              \r\n            </li>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default task;","import React, { Component } from 'react';\r\nimport Task from './Task'\r\n\r\n\r\nclass taskList extends Component {\r\n  \r\n\r\n  render() { \r\n      return (\r\n        <div>\r\n          <ul className=\"list-group\">\r\n            {this.props.tasks\r\n              .filter((task) => this.props.handleFilterTasks(task))\r\n              .map((i) => (\r\n                <Task\r\n                  key={i.title}\r\n                  handleStatusChange={() => this.props.handleSwitchStatus(i)}\r\n                  handleDeleteTask={() => this.props.handleDeleteTask(i)}\r\n                  taskData={i}\r\n                ></Task>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n      );\r\n  }\r\n}\r\n \r\nexport default taskList;","import React, { Component } from 'react';\r\nimport{Button} from 'react-bootstrap';\r\nclass AddTask extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      \"inputValue\":\"\"\r\n    }\r\n  }  \r\n  \r\n  updateNewTaskTitle(){\r\n    \r\n    }\r\n    render() { \r\n        return (\r\n          <div className=\"col-md-3\">\r\n            <div className=\"input-group\">\r\n              <input\r\n                onChange={(evt) =>\r\n                  this.setState({ inputValue: evt.target.value })\r\n                }\r\n                type=\"text\"\r\n                id=\"newTaskTitle\"\r\n                className=\"form-control\"\r\n                placeholder=\"Add new Task\"\r\n                value={this.state.inputValue}\r\n              />\r\n              <span className=\"input-group-btn\">\r\n                <Button\r\n                  \r\n                  type=\"button\"\r\n                  onClick={()=>{\r\n                    this.props.handleAddTask(this.state.inputValue)\r\n                    this.setState({inputValue:\"\"})\r\n                  }}\r\n                >\r\n                  Add\r\n                </Button>\r\n              </span>\r\n            </div>\r\n          </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default AddTask;","import React, { Component } from 'react'\r\nimport {ButtonGroup, Button} from \"react-bootstrap\";\r\n\r\nclass Filter extends Component {\r\n  renderClassName(filter,i){\r\n    if(filter!==i){return \"default\"}\r\n    else{return \"primary\"}\r\n  }\r\n    render() { \r\n        return (\r\n          <nav className=\"navbar navbar-light bg-light\">\r\n            <ButtonGroup>\r\n              {this.props.filters.map((i) => (\r\n                <Button\r\n                  bsStyle={this.renderClassName(this.props.filter,i)}\r\n                  type=\"button\"\r\n                  onClick={() => this.props.handleUpdateFilter(i)}\r\n                  \r\n                  key={i}\r\n                >\r\n                  {i}\r\n                </Button>\r\n              ))}\r\n            </ButtonGroup>\r\n          </nav>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Filter;","import React, { Component } from \"react\";\nimport './App.css';\nimport Tasklist from './components/Tasklist';\nimport AddTask from './components/AddTask';\nimport Filter from './components/Filter';\nimport {connect} from 'react-redux';\nimport * as actions from './actions'; \n\n\n\nclass App extends Component {\n  \n /*\n Functions:\n filterTasks(task) - Returns Boolean - Based on currently active filter, Tells if a given task(parameter) should be shown or not.\n */\n\n   filterTasks=(task)=>{\n    let filter=this.props.filter;\n    if(filter===\"All\"){return true}\n    else{\n      if(filter===\"Completed\") {return (task.status)}\n      else{return (!task.status) }\n    }\n  }\n\n   \n/*\nReturns the following Components:\nFilter\nAddTask\nTaskList\n*/ \n  render() { \n    \n    return (\n      <div>\n        <Filter\n          filter={this.props.filter}\n          handleUpdateFilter={(filter) => this.props.updateFilter(filter)}\n          filters={this.props.filters}\n        />\n        \n        <AddTask handleAddTask={(title)=>{if(title.trim()!==\"\") this.props.addTask(title)}} />\n        \n        <Tasklist\n          tasks={this.props.tasks}\n          handleFilterTasks={(task) => this.filterTasks(task)}\n          handleSwitchStatus={(task) => this.props.switchStatus(task.id)}\n          handleDeleteTask={(task) => this.props.deleteTask(task.id)}\n        ></Tasklist>\n      </div>\n    );\n  }\n  //sub = store.subscribe(()=>{console.log(\"STORE\")})\n}\n \nconst mapStateToProps = state =>{\n  return{\n    tasks:state.tasks,\n    filter:state.filter,\n    filters:state.filters,\n  };\n}\n\nconst mapStateToDispatch=dispatch=>{\n  return{\n    addTask:(title)=>dispatch(actions.addTask(title)),\n    updateFilter:(filter)=>dispatch(actions.updateFilter(filter)),\n    switchStatus:(taskId)=>dispatch(actions.statusChange(taskId)),\n    deleteTask:(taskId)=>dispatch(actions.deleteTask(taskId)),\n  }\n}\n\nexport default connect(mapStateToProps,mapStateToDispatch)(App);","\r\nexport const addTask=(title)=>{\r\n    return{\r\n        type:\"TASK_ADDED\",\r\n        payload:{\r\n            title,\r\n        }\r\n    }\r\n}\r\nexport const deleteTask=(id)=>{\r\n    return{\r\n    type:\"TASK_DELETED\",\r\n    payload:{\r\n        id\r\n    }\r\n    }\r\n}\r\n\r\nexport const statusChange=(id)=>{\r\nreturn{\r\n    type:\"STATUS_CHANGE\",\r\n    payload:{\r\n        id\r\n    }\r\n}\r\n}\r\n\r\nexport const updateFilter=(filter)=>{\r\n    return {\r\n      type: \"FILTER_CHANGE\",\r\n      payload:{filter}\r\n    };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","let lastId=2;\r\nconst initalState = {\r\n  filter: \"All\",\r\n  filters: [\"All\", \"Completed\", \"Pending\"],\r\n  tasks: [\r\n      {id:0,title:\"Bake Cake\"},\r\n      {id:1,title:\"Walk the Dog\"},\r\n    ],\r\n};\r\n\r\nexport default function reducer(state = initalState,action){\r\nswitch(action.type){\r\ncase 'TASK_ADDED':\r\n    return{\r\n        ...state,\r\n        \"tasks\":[\r\n        ...state.tasks,\r\n        {\"id\":lastId++,\r\n        \"title\":action.payload.title,\r\n        \"status\": false}\r\n        ]\r\n    }\r\ncase 'TASK_DELETED':\r\n        return {\r\n            ...state,\r\n            tasks: state.tasks.filter((task) => (\r\n                task.id !== action.payload.id))                \r\n        }\r\n    \r\ncase 'STATUS_CHANGE':\r\n        return {\r\n            ...state,\r\n            \"tasks\":\r\n                state.tasks.map((task)=>{\r\n                    if(task.id===action.payload.id)\r\n                    {return {...task,\"status\":task.status?false:true}}\r\n                    else{return task}\r\n                })            \r\n        }\r\ncase 'FILTER_CHANGE':\r\n    return{\r\n        ...state,\r\n        filter:action.payload.filter,\r\n    }\r\n    \r\ndefault:\r\n    return state;   \r\n}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\nimport * as bootstrap from 'react-bootstrap';\nimport {createStore} from 'redux';\nimport reducer from './reducer';\nimport { Provider } from \"react-redux\";\n\nconst store = createStore(reducer);\n\nReactDOM.render(\n <Provider store={store}>\n   <App>\n   </App>\n \n </Provider>\n,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}